// 단항, 이항, 피연산자
// 피연산자는 인수라고도 불림, 연산을 수행하는 대상

// 단항 연산자
let x = 1;
x = -x;
alert(x); // -1 단항의 마이너스 연산자는 부호를 뒤집는다

// 이항 연산자
let x = 1,
  y = 2;
alert(y - x); // 2, 이항의 마이너스 연산자는 뺄샘을 해준다

// 자바스크립트에서 지원하는 수학 연산자
// +, - , *, /, %, **

// 나머지 연산자 %
alert(5 % 2); // 5를 2로 나눈 후 나머지인 1을 출력
alert(8 % 3); // 8를 3로 나눈 후 나머지인 2을 출력

// 거듭제곱 연산자 **
alert(2 ** 3); // 2의 3제곱 8
alert(2 ** 4); // 2의 4제곱 16
// 정수가 아닌 숫자에서도 동작
alert(4 ** (1 / 2)); // 2 (1/2 거듭제곱은 제곱근)

// 문자열을 연결해주는 '+'연산자
let s = 'my' + 'string';
alert(s); // mystring

alert('1' + 2); //"12" 둘 중 하나가 문자열이면 문자열 방식으로 더함
alert('2' + 1); //"21" 둘 중 하나가 문자열이면 문자열 방식으로 더함

alert(2 + 2 + '1'); // '221'이 아닌 '41' 출력 / 왼쪽에서 오른쪽으로 연산하기 때문

// - , / 에서는 문자열을 숫자로 변환 후 연산
alert(6 - '2'); // 4
alert('6' / '2'); // 3

// 단항 연산자 + 는 숫자형으로 변환
let x = -1;
alert(+x); // -1 아무런 영향을 미치지 않음

alert(+true); // 1
alert(+''); // 0

let apples = '2';
let oranges = '3';

alert(apples + oranges); // "23" 원래대로 계산하려면
alert(+apples + +oranges); // 5 Number()와 같은 기능을 한다

// 이항 덧셈 연산자가 적용되기 전 두 피연산자붜 숫자형으로 변환시킨다.

// 연산자 우선순위 - 기본적인 수학과 같고 ()를 사용하면 우선순위를 바꿀 수 있다.

// 할당 연산자 =  우선순위가 몹시 낮다

let x = 2 * 2 + 1; // 5 오른쪽 계산이 모두 되고 나서 x에 할당된다.

let a = 1;
let b = 2;
let c = 3 - (a = b + 1);

alert(a); // 3
alert(c); // 0
// 이런식도 가능하다. 가독성이 떨어지기 때문에 쓰지 않는 것이 좋다

// 할당 연산자 체이닝
// 여러 개 연결 가능

let a, b, c;

a = b = c = 2 + 2;

console.log(a, b, c); // 모두 4가 나오지만 이런식은 좋지 않다.

c = 2 + 2;
b = c;
a = c; // 이게 좋다.

// 복합 할당 연산자
let n = 2;
n = n + 5;
n = n * 2;
// 이런식으로 축약 가능
n += 2; // n = n + 2
n *= 4; // n = n * 4

n *= 3 + 5; // 오른쪽부터 계산되므로 n *= 8과 동일

// 증가 감소 연산자
// 숫자를 하나 늘리거나 줄일 때 사용되는 연산자
// ++
let counter = 2;
counter++;
alert(counter); // 3

// --
let counter = 2;
counter--;
alert(counter); // 1

// 증가 감소 연산자는 변수에만 쓸 수 있다. 5++ 불가능

// ++counter vs counter++
// 반환값을 사용할때 차이가 있다.
let counter = 0;
counter++;
++counter;
console.log(counter); // 2

let counter = 0;
console.log(++counter); // 1 - 값을 바로 사용해도 증가한다.

let counter = 0;
console.log(counter++); // 0 - 값을 바로 사용하면 증가하지 않는다.

// 비트 연산자
// AND &
// OR |
// XOR ^
// NOT ~

// homework
let a = 1,
  b = 1;

let c = ++a; // 2
let d = b++; // 1

let a = 2;
let x = 1 + (a *= 2); // a = 4, x = 5

'' + 1 + 0; // 10
'' - 1 + 0; // -1
true + false; // 1
6 / '3'; // 2
'2' * '3'; // 6
4 + 5 + 'px'; // "9px"
'$' + 4 + 5; // "$45"
'4' - 2; // 2
'4px' - 2; // NaN
7 / 0; // Infinity
' -9 ' + 5; // " -9 5"
' -9 ' - 5; // -14
null + 1; // 1
undefined + 1; //NaN
' \t \n' - 2; // -2
